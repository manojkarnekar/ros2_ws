<?xml version="1.0"?>
<launch>
  <node name="arduino_node"        pkg="rosserial_python"      type="serial_node.py">
    <param name="port"              type="string"               value="/dev/arduino"/>
    <param name="baud"              type="int"                  value="115200"/>
  </node>

  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/rplidars2"/>  
    <param name="serial_baudrate"     type="int"    value="1000000"/>
    <param name="frame_id"            type="string" value="laser_link"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
  </node>

  <param name="robot_description" textfile="$(find ros1_bot)/urdf/jetbrain_afs.urdf.xacro"/>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_st_pub"></node>
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_st_pub"></node>
  <!-- <remap from="robot_description" to="afs_description" /> -->
    
  
  <!-- <node name="imu_node"        pkg="rosserial_python"      type="serial_node.py">
    <param name="port"              type="string"               value="/dev/imu"/>
    <param name="baud"              type="int"                  value="115200"/>
  </node> -->

  <node name="afs_odometry" pkg="afs_control" type="odometry.py" output="screen"></node>
  <node name="afs_motor_control" pkg="afs_control" type="motor_control.py" output="screen"></node>
  <node name="imu_sub_publisher" pkg="ros1_bot" type="imu_sub_publisher.py" output="screen"></node>
  <node name="complementary_filter" pkg="imu_complementary_filter" type="complementary_filter_node" output="screen"></node>

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
    <rosparam command="load" file="$(find ros1_bot)/params/ekf_params.yaml" />
  </node>

  <node pkg="slam_toolbox" type="sync_slam_toolbox_node" name="slam_toolbox" output="screen"></node>
  <!-- <node pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" output="screen"></node> -->

  <!-- <node name="slam_gmapping" pkg="gmapping" type="slam_gmapping" output="screen">
    <param name="base_frame" value="base_footprint"/>
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="scan" value="/scan"/>
    <param name="map_update_interval " value="1.0"/>
  </node> -->

</launch>